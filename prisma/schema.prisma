// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String
  password  String?
  role      Role       @default(USER)
  Orders    Order[]
  Comments  Comment[]
  Addresses Address[]
  Wishlists Wishlist[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItems  OrderItem[]
  Comments    Comment[]
  Wishlists   Wishlist[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  orders    Order[]
  createdAt DateTime @default(now())
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id         Int         @id @default(autoincrement())
  totalPrice Float
  userId     Int
  status     OrderStatus
  addressId  Int
  address    Address     @relation(fields: [addressId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  createdAt  DateTime    @default(now())
}

enum OrderStatus {
  PENDING // سفارش در انتظار پردازش
  PROCESSING // سفارش در حال پردازش
  SHIPPED // سفارش ارسال شده است
  DELIVERED // سفارش تحویل داده شده است
  CANCELLED // سفارش لغو شده است
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  email     String
  name      String
  review    String
  rating    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
